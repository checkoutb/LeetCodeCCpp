
#include "../header/myheader.h"

class LT0891
{
public:

    // D

    // 这个数字，如果是 max，那么应该增加多少，如果是min那么应该减去多少？

    // mx1 - mn1 + mx2 - mn2 + mx3 - mn3 + mx4 - mn4
    // mx1 + mx2 + mx3 + mx3 - mn1 - mn2 - mn3 - mn4

    // 分开。。


    // g

/*

5 5 
4 4 4
2 2

1*(2*3)*(3!) = 18 .  {5,4}*6, {5,5,4}*3, {5,4,4}*6, {5,5,4,4}*3 {5,5,4,4,4}*1
(2C1)*(3C1)*(3!) = 36...
(2C1)*(3C1)*(3C0 + 3C1 + 3C2 + 3C3)

3C0 -> {5,4} -> 6
3C1 -> {5,5,4} / {5,4,4} -> 3+6 = 9 ... != 2*3*3
..{5，5，4}的时候就没有(2C1)了， 是(2C2) 。。


2C1*3C1 + 2C2*3C1 + 2c1*3c2 + 2c2*3c2 + 2c1*3c3 + 2c2*3c3
6+3+6+3+2+1     21

{5,4}(6), {5,5,4}(3), {5,4,4}(6), {5,5,4,4}(3), {5,4,4,4}(2), {5,5,4,4,4}(1)

最大值个数的C * 最小值个数的C * 其它值个数!


(2C1 + 2C2) * (3C1 + 3C2 + 3C3) = 上面的。


2C0 + 2C1 + 2C2 = 1+2+1 = 4 = ???
...

(1)+3+3+1


4!/(2!(4-2)!)

4C1 4C2 4C3 4C4
4+6+4+1


5!/2!3!
5C1
5 + 10 10


...杨辉三角？


6、每个数字等于上一行的左右两个数字之和.可用此性质写出整个杨辉三角.即第n+1行的第i个数等于第n行的第i-1个数和第i个数之和,这也是组合数的性质之一.即C(n+1,i)=C(n,i)+C(n,i-1).

7、第n行的m个数可表示为C(n-1,m-1)（n-1下标,m-1上标）,即为从n-1个不同元素中取m-1个元素的组合数.

。。。




*/
    int lt0891a(vector<int>& nums)
    {
        const int MOD = 1e9 + 7;
        map<int, int> map2;
        for (int i : nums)
            map2[i]++;

        int ans = 0;



    }

};

int main()
{

    LT0891 lt;


    return 0;
}
